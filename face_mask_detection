{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "face_mask_detection.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dutt-2302/Identification_GYM_Equipment/blob/main/face_mask_detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RFKCmyjsnnfp"
      },
      "source": [
        "**Importing required libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jc6zGHU8AAqk"
      },
      "source": [
        "import tensorflow as tf\n",
        "import keras \n",
        "\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.applications import MobileNetV2\n",
        "from tensorflow.keras.applications.mobilenet_v2 import preprocess_input\n",
        "from tensorflow.keras.layers import Dropout\n",
        "from tensorflow.keras.layers import MaxPooling2D\n",
        "from tensorflow.keras.layers import AveragePooling2D\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.layers import Input\n",
        "from tensorflow.keras.layers import Conv2D\n",
        "from tensorflow.keras.layers import add\n",
        "from tensorflow.keras.layers import Activation\n",
        "from keras.utils import plot_model\n",
        "\n",
        "from tensorflow.keras.models import Sequential , Model , load_model\n",
        "\n",
        "\n",
        "from sklearn.metrics import classification_report\n",
        "#from sklearn.model_selection import train_test_split\n",
        "#from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.preprocessing.image import load_img , img_to_array\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import cv2\n",
        "#from imutils import paths\n",
        "import numpy as np\n",
        "import os\n",
        "import time\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "%matplotlib inline\n",
        "#from google.colab.patches import cv2_imshow"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "0_puoSIBAL_o",
        "outputId": "5eaf18a3-f5a2-4b5c-bcef-ddef8dc96969"
      },
      "source": [
        "from google.colab import files\n",
        "my_files=files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-17e3d68f-cd8e-48a5-8ca2-dd336f575e29\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-17e3d68f-cd8e-48a5-8ca2-dd336f575e29\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0-eEZkjrAPqP"
      },
      "source": [
        "cred = pd.read_json(\"kaggle.json\",lines=True)\n",
        "os.environ['KAGGLE_USERNAME'] = cred.iloc[0][0]\n",
        "os.environ['KAGGLE_KEY'] = cred.iloc[0][1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dV-WEVgioUK8"
      },
      "source": [
        "**Downloading data from kaggle**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9KGIdI-9AVrE",
        "outputId": "193d73e9-b1e0-445a-85c4-17015db6160f"
      },
      "source": [
        "!kaggle datasets download -d ashishjangra27/face-mask-12k-images-dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading face-mask-12k-images-dataset.zip to /content\n",
            " 96% 317M/330M [00:02<00:00, 161MB/s]\n",
            "100% 330M/330M [00:02<00:00, 157MB/s]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rSsEKjS4obO9"
      },
      "source": [
        "**Unzipping the zip file of downloaded dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aDOyzRFIAYov",
        "outputId": "10dc4c00-c5fd-448d-df7a-40e3d8f0be76"
      },
      "source": [
        "!unzip /content/face-mask-12k-images-dataset.zip"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1857.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1858.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1859.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1862.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1864.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1865.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1866.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1867.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1870.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1871.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1872.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1873.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1876.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1878.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1879.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/188.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1880.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1881.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1884.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1885.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1886.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1887.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1889.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/189.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1890.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1891.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1892.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1893.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1894.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1898.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1899.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/19.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1902.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1904.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1905.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1906.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1907.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1910.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1911.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1912.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1913.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1915.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1916.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1918.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1919.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1923.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1924.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1925.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1926.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1927.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1930.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1931.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1933.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1937.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1938.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1939.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/194.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1944.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1945.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1946.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1948.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/195.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1950.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1951.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1952.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1958.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1959.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1960.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1963.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1964.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1965.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1966.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/197.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1970.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1971.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1972.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1973.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1974.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1977.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1978.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1979.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/198.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1985.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1986.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1987.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1988.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/199.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1990.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1991.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1992.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1993.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1998.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/1999.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/20.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/200.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2000.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2001.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2002.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2003.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2004.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2005.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2006.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2007.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2008.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2009.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/201.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2010.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2011.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2012.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2013.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2014.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2015.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2016.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2017.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2018.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2019.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/202.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2020.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2021.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2022.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2023.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2024.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2025.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2026.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2027.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2028.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2029.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/203.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2031.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2032.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2033.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2034.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2035.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2036.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2037.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2038.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2039.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/204.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2040.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2041.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2042.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2048.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2049.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/205.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2054.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2055.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2056.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2058.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2059.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/206.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2060.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2061.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2062.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2063.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2064.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2065.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2066.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2067.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2068.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2069.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/207.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2070.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2071.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2072.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2073.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2074.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2075.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2076.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2077.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/208.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2081.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2082.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2083.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2088.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2089.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/209.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2095.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2097.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2098.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2099.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/21.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/210.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2100.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2101.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2102.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2103.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2104.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2105.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2106.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2107.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2108.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2109.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/211.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2110.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2111.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2112.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2113.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2114.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2115.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2116.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2117.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/212.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2120.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2121.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2122.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2128.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2129.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/213.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2134.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2135.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2136.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2138.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2139.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/214.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2140.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2141.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2142.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2143.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2144.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2145.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2146.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2147.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2148.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2149.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/215.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2150.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2151.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2152.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2153.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2154.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2155.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2156.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2157.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2158.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2159.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/216.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2160.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2161.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2162.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2163.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2164.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2165.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2166.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2167.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2168.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2169.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/217.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2170.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2171.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2172.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2173.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2174.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2175.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2176.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2177.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2178.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2179.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2180.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2181.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2182.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2184.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2185.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2186.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2187.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2188.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2189.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2190.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2191.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2192.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2193.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2194.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2195.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2196.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2197.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2198.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2199.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/22.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/220.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2200.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2201.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2202.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2203.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2204.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2205.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2206.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2207.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2208.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2209.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/221.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2210.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2211.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2212.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2213.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2214.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2215.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2216.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2217.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2218.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2219.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/222.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2220.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2221.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2222.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2223.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2224.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2225.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2226.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2227.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2228.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2229.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2230.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2231.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2232.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2233.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2234.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2235.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2236.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2237.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2238.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2239.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2240.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2241.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2242.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2243.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2248.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2249.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2254.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2256.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2257.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2258.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2259.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2260.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2261.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2262.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2263.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2264.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2265.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2266.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2267.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2268.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2269.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2270.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2271.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2272.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2273.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2274.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2275.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2276.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2277.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/228.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2280.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2281.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2283.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2288.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2289.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/229.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2294.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2295.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2297.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2298.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2299.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/23.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2300.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2301.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2302.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2303.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2304.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2305.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2306.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2307.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2308.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2310.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2311.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2312.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2313.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2314.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2315.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2316.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2317.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2320.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2322.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2323.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2328.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2329.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2334.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2336.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2337.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2338.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2339.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/234.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2340.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2341.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2342.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2343.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2344.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2345.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2346.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2347.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2348.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2349.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/235.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2350.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2351.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2352.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2353.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2354.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2355.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2356.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2357.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2358.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2359.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/236.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2360.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2361.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2362.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2363.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2364.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2365.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2366.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2367.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2368.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2369.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2370.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2371.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2372.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2373.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2374.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2375.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2376.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2377.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2378.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2379.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/238.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2380.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2381.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2382.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2383.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2384.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2385.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2386.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2387.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2389.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/239.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2390.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2391.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2392.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2393.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2395.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2396.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2397.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2398.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2399.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/24.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/240.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2400.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2401.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2402.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2403.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2404.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2405.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2406.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2407.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2408.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2409.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/241.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2410.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2411.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2412.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2413.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2414.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2415.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2416.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2417.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2418.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2419.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/242.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2420.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2421.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2422.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2423.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2424.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2425.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2426.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2427.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2428.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2429.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/243.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2430.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2431.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2432.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2433.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2434.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2435.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2436.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2437.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2438.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2439.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/244.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2444.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2445.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2446.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2448.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2449.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/245.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2450.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2451.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2452.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2459.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/246.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2460.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2461.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2462.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2463.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2464.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2465.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2466.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2467.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/247.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2471.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2472.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2473.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2474.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2475.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2476.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2477.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2478.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2479.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/248.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2485.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2486.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2487.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2488.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2489.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/249.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2491.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2492.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2493.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2498.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2499.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/25.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/250.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2500.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2501.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2502.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2503.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2504.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2505.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2506.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2507.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/251.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2510.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2511.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2512.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2513.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2514.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2515.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2516.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2517.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2518.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2519.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/252.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2524.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2525.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2526.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2528.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2529.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/253.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2530.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2531.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2532.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2538.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2539.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/254.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2540.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2541.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2542.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2543.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2544.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2545.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2546.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2547.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2548.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2549.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/255.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2550.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2551.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2552.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2553.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2554.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2555.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2556.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2557.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2558.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2559.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/256.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2560.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2561.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2562.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2563.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2564.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2565.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2566.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2567.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2568.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2569.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/257.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2570.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2571.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2572.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2573.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2574.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2575.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2576.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2577.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2578.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2579.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/258.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2580.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2581.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2582.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2583.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2584.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2585.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2586.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2587.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2588.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2589.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/259.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2590.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2591.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2592.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2593.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2594.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2595.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2596.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2597.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2598.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2599.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/26.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/260.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2600.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2601.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2602.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2603.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2604.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2605.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2606.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2607.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2608.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2609.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/261.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2610.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2611.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2612.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2613.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2614.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2615.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2616.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2617.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2618.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2619.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/262.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2620.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2621.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2622.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2623.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2624.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2625.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2626.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2627.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2628.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2629.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/263.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2630.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2631.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2632.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2633.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2634.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2635.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2636.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2637.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2638.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2639.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/264.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2644.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2646.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2647.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2648.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2649.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/265.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2650.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2652.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2653.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2658.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2659.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/266.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2660.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2661.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2662.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2663.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2664.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2665.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2666.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2667.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/267.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2670.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2671.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2672.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2673.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2674.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2675.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2676.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2677.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2678.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/268.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2684.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2685.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2687.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2688.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2689.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/269.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2690.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2691.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2693.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2698.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2699.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/27.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/270.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2700.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2701.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2702.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2703.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2704.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2705.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2706.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2707.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/271.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2710.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2711.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2712.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2713.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2714.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2715.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2716.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2717.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2718.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/272.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2724.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2726.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2727.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2728.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2729.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/273.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2730.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2732.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2733.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2738.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2739.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/274.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2740.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2741.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2742.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2743.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2744.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2745.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2746.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2747.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2748.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2749.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/275.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2750.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2751.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2752.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2753.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2754.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2755.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2756.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2757.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2758.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2759.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/276.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2760.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2761.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2762.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2763.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2764.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2765.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2766.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2767.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2768.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2769.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/277.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2770.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2771.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2772.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2773.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2774.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2775.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2776.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2777.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2778.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2779.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/278.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2780.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2781.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2782.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2783.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2784.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2785.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2786.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2787.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2788.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2789.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/279.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2790.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2791.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2792.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2793.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2794.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2795.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2796.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2797.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2798.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2799.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/28.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/280.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2800.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2801.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2802.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2803.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2804.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2805.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2806.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2807.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2808.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2809.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/281.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2810.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2811.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2812.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2813.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2814.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2815.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2816.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2817.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2818.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2819.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/282.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2820.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2821.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2822.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2823.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2824.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2825.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2826.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2827.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2828.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2829.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/283.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2830.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2831.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2832.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2833.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2834.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2835.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2836.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2837.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2838.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2839.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/284.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2840.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2841.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2842.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2843.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2844.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2845.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2846.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2847.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2848.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2849.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/285.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2850.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2851.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2852.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2853.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2854.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2857.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/286.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/287.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2878.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2879.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/288.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2880.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2881.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2884.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2885.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2886.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2887.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/289.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2890.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2891.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2892.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2893.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2894.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/29.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/290.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2900.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2909.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/291.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2915.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2918.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2919.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/292.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2923.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2924.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2925.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2926.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2927.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/293.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2930.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2931.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2933.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2937.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/294.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2940.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2941.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2942.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2943.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2944.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2945.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2946.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2947.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2948.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/295.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2950.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2951.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2952.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2953.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2954.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2955.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2956.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2957.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2958.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2959.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/296.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2960.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2963.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2964.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2965.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2966.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2967.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2968.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2969.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/297.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2970.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2971.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2972.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2973.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2974.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2977.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2978.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2979.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/298.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2980.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2981.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2982.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2983.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2984.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2985.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2986.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2987.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2988.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/299.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2990.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2991.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2992.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2993.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2994.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2995.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2996.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2997.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2998.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/2999.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/30.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/300.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3000.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3001.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3002.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3008.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3009.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/301.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3014.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3015.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3016.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3018.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3019.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/302.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3020.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3021.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3022.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3023.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3024.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3025.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3026.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3027.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3028.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3029.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/303.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3030.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3031.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3032.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3033.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3034.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3035.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3036.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3037.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/304.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3040.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3041.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3042.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3043.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3044.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3045.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3046.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3047.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3049.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/305.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3050.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3051.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3052.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3053.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3054.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3055.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3056.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3057.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3058.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3059.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/306.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3060.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3061.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3062.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3063.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3064.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3065.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3066.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3067.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3068.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3069.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/307.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3070.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3071.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3072.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3073.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3074.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3075.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3076.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3077.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3078.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3079.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/308.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3080.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3081.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3082.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3083.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3084.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3085.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3086.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3087.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3088.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3089.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/309.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3090.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3091.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3092.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3093.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3094.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3095.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3096.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3097.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3098.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3099.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/31.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/310.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3100.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3101.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3102.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3103.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3104.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3105.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3106.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3107.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3108.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3109.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/311.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3110.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3111.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3112.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3113.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3114.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3115.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3116.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3117.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3118.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3119.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/312.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3120.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3121.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3122.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3123.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3124.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3125.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3126.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3127.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3128.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3129.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/313.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3130.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3131.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3132.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3133.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3134.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3135.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3136.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3137.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3138.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3139.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/314.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3140.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3141.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3142.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3143.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3144.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3145.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3146.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3147.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3148.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3149.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/315.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3150.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3151.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3152.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3153.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3154.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3155.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3156.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3157.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/316.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3160.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3161.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3162.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3163.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3168.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3169.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/317.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3174.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3175.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3177.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3178.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3179.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/318.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3180.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3181.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3182.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3183.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3184.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3185.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3186.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3187.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3189.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/319.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3190.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3191.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3192.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3193.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3194.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3195.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3196.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3197.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/32.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/320.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3200.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3202.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3203.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3208.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3209.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/321.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3214.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3216.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3217.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3218.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3219.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/322.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3220.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3221.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3222.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3223.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3224.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3225.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3226.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3227.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3228.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/323.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3230.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3231.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3232.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3233.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3234.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3235.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3236.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3237.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/324.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3240.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3241.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3242.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3243.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3244.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3245.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3246.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3247.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3248.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3249.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/325.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3250.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3251.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3252.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3253.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3254.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3255.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3256.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3257.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3258.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3259.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/326.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3260.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3261.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3262.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3263.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3264.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3265.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3266.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3267.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3268.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3269.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/327.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3270.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3271.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3272.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3273.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3275.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3276.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3277.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3278.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3279.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/328.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3280.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3281.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3282.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3283.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3284.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3285.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3286.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3287.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3288.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3289.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/329.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3290.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3291.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3292.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3293.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3294.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3295.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3296.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3297.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3298.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3299.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/33.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/330.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3300.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3301.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3302.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3303.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3304.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3305.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3306.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3307.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3308.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3309.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/331.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3310.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3311.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3312.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3313.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3314.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3315.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3316.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3317.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3318.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3319.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/332.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3320.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3321.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3322.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3324.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3325.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3326.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3327.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3328.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3329.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/333.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3330.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3331.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3333.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3334.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3335.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3336.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3337.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3338.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3339.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/334.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3341.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3342.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3343.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3344.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3345.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3346.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3347.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3348.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/335.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3350.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3351.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3352.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3353.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3354.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3355.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3356.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3357.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/336.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3360.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3362.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3363.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3368.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3369.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/337.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3374.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3376.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3377.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3378.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3379.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/338.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3380.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3381.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3382.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3383.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3384.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3385.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3386.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3387.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3388.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3389.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/339.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3390.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3391.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3392.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3393.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3395.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3396.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3397.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/34.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/340.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3404.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3405.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3406.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3408.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3409.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/341.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3410.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3411.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3412.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3418.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3419.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/342.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3420.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3421.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3422.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3423.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3424.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3425.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3426.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3427.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3430.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3431.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3432.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3433.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3434.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3435.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3436.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3437.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3438.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3439.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3440.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3441.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3442.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3443.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3444.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3445.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3446.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3447.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3448.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3449.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3450.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3451.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3452.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3453.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3454.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3455.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3456.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3457.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3458.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3459.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3460.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3461.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3462.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3463.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3464.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3465.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3466.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3467.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3468.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3469.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3470.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3471.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3472.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3473.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3474.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3475.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3476.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3477.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3478.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3479.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/348.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3480.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3481.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3482.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3483.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3484.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3485.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3486.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3487.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3488.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3489.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/349.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3490.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3491.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3492.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3493.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3494.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3495.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3496.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3497.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3498.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3499.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/35.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3500.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3501.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3502.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3503.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3504.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3505.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3506.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3507.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3508.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3509.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3510.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3511.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3512.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3513.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3514.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3515.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3516.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3517.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3518.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3519.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3520.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3521.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3522.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3523.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3524.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3525.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3526.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3527.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3528.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3529.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3530.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3531.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3532.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3533.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3534.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3535.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3536.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3537.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3538.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3539.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/354.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3540.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3541.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3542.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3543.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3544.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3545.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3546.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3547.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/355.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3550.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3551.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3552.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3553.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3554.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3555.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3556.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3557.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3558.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3559.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/356.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3564.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3565.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3566.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3568.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3569.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3570.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3571.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3572.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3578.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3579.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/358.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3580.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3581.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3582.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3584.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3585.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3586.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3587.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/359.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3590.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3591.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3592.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3593.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3594.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3595.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3596.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3597.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3599.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/36.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/360.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3604.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3605.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3606.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3607.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3608.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3609.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/361.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3610.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3611.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3612.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3613.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3618.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3619.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/362.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3620.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3621.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3622.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3623.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3624.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3625.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3626.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3627.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/363.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3630.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3631.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3632.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3633.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3634.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3635.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3636.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3637.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3638.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3639.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/364.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3640.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3641.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3642.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3643.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3644.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3645.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3646.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3647.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3648.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3649.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/365.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3650.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3651.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3652.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3653.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3654.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3655.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3656.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3657.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3658.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3659.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/366.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3660.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3661.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3662.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3663.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3664.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3665.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3666.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3668.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/367.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3670.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3672.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3673.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3674.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3675.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3676.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3677.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3679.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/368.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3680.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3681.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3682.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3683.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3684.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3685.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3686.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3687.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3688.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3689.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/369.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3690.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3691.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3692.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3693.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3694.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3695.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3696.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3697.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3698.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3699.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/37.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/370.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3700.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3701.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3702.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3703.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3704.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3705.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3706.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3707.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3708.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3709.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/371.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3710.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3711.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3712.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3713.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3715.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3716.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3717.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3718.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3719.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/372.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3720.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3721.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3722.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3723.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3724.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3725.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3726.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3727.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3728.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3729.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/373.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3730.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3731.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3732.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3733.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3734.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3735.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3736.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3737.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3738.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3739.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/374.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3740.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3741.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3742.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3743.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3744.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3745.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3746.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3747.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/375.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3750.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3751.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3752.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3753.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3754.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3755.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3756.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3757.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3758.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/376.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3764.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3766.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3767.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3768.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3769.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/377.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3770.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3772.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3773.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3778.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3779.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3780.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3781.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3782.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3783.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3784.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3785.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3786.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3787.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3790.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3791.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3793.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3794.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3795.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3796.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3797.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3798.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3799.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/38.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3800.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3801.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3802.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3803.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3804.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3805.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3806.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3807.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3808.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3809.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/381.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3810.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3811.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3812.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3813.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3814.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3815.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3816.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3817.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/382.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3820.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3821.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3823.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3828.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3829.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/383.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3834.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3835.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3837.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3838.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3839.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3840.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3841.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3842.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3843.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3844.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3845.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3846.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3847.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3848.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3849.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3850.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3851.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3852.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3853.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3854.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3857.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3858.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3859.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3862.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3864.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3865.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3866.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3867.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3870.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3871.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3872.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3873.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3876.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3878.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3879.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/388.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3880.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3881.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3884.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3885.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3886.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3887.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3889.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/389.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3890.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3891.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3892.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3894.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3898.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3899.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3900.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3902.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3904.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3905.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3906.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3909.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3912.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3913.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3918.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3919.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3923.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3924.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3925.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3926.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3927.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3930.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3931.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3933.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3937.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3938.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3939.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3940.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3941.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3943.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3948.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/395.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3954.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3955.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3957.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3958.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3959.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/396.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3960.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3963.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3964.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3965.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3966.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3967.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3969.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/397.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3970.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3971.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3972.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3973.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3974.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3977.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/398.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3980.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3982.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3983.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3988.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/399.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3994.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3996.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3997.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3998.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/3999.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/400.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4000.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4001.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4002.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4003.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4004.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4005.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4006.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4007.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4008.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4009.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/401.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4010.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4011.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4012.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4013.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4014.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4015.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4016.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4017.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/402.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4020.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4021.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4023.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4028.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4029.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/403.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4034.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4035.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4037.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4038.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4039.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/404.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4040.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4041.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4042.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4043.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4044.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4045.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4046.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4047.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4048.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4049.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/405.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4050.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4051.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4052.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4053.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4054.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4055.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4056.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4057.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4058.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4059.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/406.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4060.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4061.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4062.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4063.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4064.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4065.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4066.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4067.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4068.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4069.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/407.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4070.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4071.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4072.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4073.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4074.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4075.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4076.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4077.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4078.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4079.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4080.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4081.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4082.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4083.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4084.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4085.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4086.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4087.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4088.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4089.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4090.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4091.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4092.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4093.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4094.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4095.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4096.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4097.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4098.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4099.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/41.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/410.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4100.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4101.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4102.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4103.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4104.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4105.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4106.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4107.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4108.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4109.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/411.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4110.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4111.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4112.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4113.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4114.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4115.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4116.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4117.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4118.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4119.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/412.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4120.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4121.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4122.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4123.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4124.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4125.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4126.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4127.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4128.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4129.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/413.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4130.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4131.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4132.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4133.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4134.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4135.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4136.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4137.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4138.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4139.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/414.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4140.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4141.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4143.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4148.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4149.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/415.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4154.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4155.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4157.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4158.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4159.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/416.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4160.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4161.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4162.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4163.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4164.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4165.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4166.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4167.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4168.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4169.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/417.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4170.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4171.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4172.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4173.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4174.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4175.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4176.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4177.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/418.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4180.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4182.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4183.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4188.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4189.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4194.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4196.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4197.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4198.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4199.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/42.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4200.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4201.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4202.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4203.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4204.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4205.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4206.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4207.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4209.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4210.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4211.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4212.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4213.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4214.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4215.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4216.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4217.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4221.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4222.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4223.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4228.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4229.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4235.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4236.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4237.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4238.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4239.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/424.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4240.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4241.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4242.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4243.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4244.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4245.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4246.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4247.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4248.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4249.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4250.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4251.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4252.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4253.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4254.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4255.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4256.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4257.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4258.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4259.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/426.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4260.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4261.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4262.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4263.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4264.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4265.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4266.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4267.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4268.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4269.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/427.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4270.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4271.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4272.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4273.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4274.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4275.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4276.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4277.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4278.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4279.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/428.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4280.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4281.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4282.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4283.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4284.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4285.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4286.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4287.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4288.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4289.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/429.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4290.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4291.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4292.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4293.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4294.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4295.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4296.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4297.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4298.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4299.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/43.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/430.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4300.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4301.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4302.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4303.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4304.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4305.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4306.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4307.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4308.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4309.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4310.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4311.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4312.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4313.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4314.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4315.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4316.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4317.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4318.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4319.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/432.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4320.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4321.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4322.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4323.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4324.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4325.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4326.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4327.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4328.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4329.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/433.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4330.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4331.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4332.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4333.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4334.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4335.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4336.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4337.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4338.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4339.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4341.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4342.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4343.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4348.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4349.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4355.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4356.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4357.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4358.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4359.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4360.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4361.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4362.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4363.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4364.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4365.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4366.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4367.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4369.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4370.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4371.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4372.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4373.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4374.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4375.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4376.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4377.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4380.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4381.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4382.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4388.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4389.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/439.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4394.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4395.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4396.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4398.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4399.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/440.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4400.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4401.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4402.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4403.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4404.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4405.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4406.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4407.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/441.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4410.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4411.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4412.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4413.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4414.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4415.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4416.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4417.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4418.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4419.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/442.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4424.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4427.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4428.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4429.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/443.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4430.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4431.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4433.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4438.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4439.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/444.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4440.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4441.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4442.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4443.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4444.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4445.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4446.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4448.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4449.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/445.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4450.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4451.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4452.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4453.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4454.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4455.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4456.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4457.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4458.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4459.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/446.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4460.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4461.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4462.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4463.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4464.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4465.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4466.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4467.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4468.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4469.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/447.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4470.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4471.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4472.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4473.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4474.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4475.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4476.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4477.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4478.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4479.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/448.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4480.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4481.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4482.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4483.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4484.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4485.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4486.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4487.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4488.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4489.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/449.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4490.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4491.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4492.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4493.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4494.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4495.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4496.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4497.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4498.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4499.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/450.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4500.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4501.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4502.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4503.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4504.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4505.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4506.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4507.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4508.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4509.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/451.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4510.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4511.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4512.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4513.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4514.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4515.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4516.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4517.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4518.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4519.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/452.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4520.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4521.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4522.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4523.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4524.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4525.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4526.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4527.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4528.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4529.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4530.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4531.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4532.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4533.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4534.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4535.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4536.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4537.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4538.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4539.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/454.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4544.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4547.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4548.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4549.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/455.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4550.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4551.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4553.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4558.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4559.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/456.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4560.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4561.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4562.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4563.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4564.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4565.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4566.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4567.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/457.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4570.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4571.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4572.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4573.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4574.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4575.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4576.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4577.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4578.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4579.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/458.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4584.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4586.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4587.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4588.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4589.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/459.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4590.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4592.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4593.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4598.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4599.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/460.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4600.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4601.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4602.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4603.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4604.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4605.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4606.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4607.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/461.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4610.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4611.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4612.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4613.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4614.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4615.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4616.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4617.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4618.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4619.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/462.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4625.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4626.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4627.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4628.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4629.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/463.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4630.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4631.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4632.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4633.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4638.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4639.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/464.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4640.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4641.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4642.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4643.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4644.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4645.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4646.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4647.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4648.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4649.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/465.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4650.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4651.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4652.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4654.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4655.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4656.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4657.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4658.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4659.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/466.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4660.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4661.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4662.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4663.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4664.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4665.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4666.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4667.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4668.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4669.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/467.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4670.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4671.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4672.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4673.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4674.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4675.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4676.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4677.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4678.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4679.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/468.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4680.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4681.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4682.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4683.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4684.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4685.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4686.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4687.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4688.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4689.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/469.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4690.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4691.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4692.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4693.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4694.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4695.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4696.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4697.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4698.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4699.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/470.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4700.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4701.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4702.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4703.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4704.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4705.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4706.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4707.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4708.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4709.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/471.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4710.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4711.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4712.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4713.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4714.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4715.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4716.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4717.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4718.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4719.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4720.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4721.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4722.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4723.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4724.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4725.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4726.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4727.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4728.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4729.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/473.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4730.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4731.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4732.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4733.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4734.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4735.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4736.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4737.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4738.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4739.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/474.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4745.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4746.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4747.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4748.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4749.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/475.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4751.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4752.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4753.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4758.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4759.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/476.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4760.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4761.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4762.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4763.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4764.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4765.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4766.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4767.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/477.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4770.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4771.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4772.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4773.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4774.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4775.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4776.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4777.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4779.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/478.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4784.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4785.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4786.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4788.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4789.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/479.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4790.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4792.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4798.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4799.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/48.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/480.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4801.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4802.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4808.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4809.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/481.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4814.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4815.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4816.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4818.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4819.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/482.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4820.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4821.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4822.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4823.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4824.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4825.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4826.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4827.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4828.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4829.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/483.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4830.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4831.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4832.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4833.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4834.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4835.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4836.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4837.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/484.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4840.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4841.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4842.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4843.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4844.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4845.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4846.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4847.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4848.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4849.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/485.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4850.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4851.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4852.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4853.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4854.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4857.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4858.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4859.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/486.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4862.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4864.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4865.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4866.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4867.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/487.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4870.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4871.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4872.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4873.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4876.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4878.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4879.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/488.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4880.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4881.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4884.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4885.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4886.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4887.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4889.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/489.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4890.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4891.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4892.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4893.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4894.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4898.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4899.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/49.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/490.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4900.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4902.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4904.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4905.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4906.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4907.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4909.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/491.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4910.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4911.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4912.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4913.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4915.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4916.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4918.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4919.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/492.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4923.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4924.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4925.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4926.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4927.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/493.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4930.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4931.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4933.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4937.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4938.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4939.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/494.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4940.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4941.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4942.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4943.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4944.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4945.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4946.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4947.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4948.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/495.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4950.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4951.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4952.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4953.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4954.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4955.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4956.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4957.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/496.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4960.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4968.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4969.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/497.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4978.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4979.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/498.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4980.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4981.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4982.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4983.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4984.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4985.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4986.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4987.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/499.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4990.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4991.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4992.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4993.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4994.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4995.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4996.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/4997.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/500.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5000.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5001.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5002.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5003.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5005.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5006.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5007.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5008.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5009.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/501.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5010.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5011.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5012.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5013.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5014.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5015.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5016.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5017.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5018.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5019.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/502.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5020.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5021.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5022.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5023.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5024.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5025.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5026.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5027.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5028.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5029.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/503.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5030.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5031.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5032.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5033.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5034.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5035.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5036.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5037.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5038.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5039.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/504.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5040.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5041.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5042.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5043.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5044.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5045.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5046.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5047.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5048.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5049.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/505.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5050.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5051.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5052.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5053.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5054.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5055.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5056.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5057.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/506.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5060.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5061.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5063.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5068.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5069.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/507.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5074.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5075.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5077.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5078.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5079.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/508.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5080.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5081.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5082.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5083.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5084.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5085.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5086.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5087.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5088.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/509.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5090.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5091.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5092.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5093.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5094.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5095.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5096.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5097.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/510.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5100.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5101.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5103.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5108.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5109.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/511.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5114.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5115.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5117.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5118.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5119.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/512.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5120.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5121.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5122.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5123.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5124.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5125.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5126.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5127.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5128.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5129.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/513.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5130.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5131.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5132.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5133.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5134.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5135.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5136.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5137.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/514.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5140.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5141.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5142.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5143.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5144.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5145.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5146.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5147.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5148.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5149.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/515.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5150.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5151.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5152.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5153.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5154.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5155.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5156.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5157.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5158.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5159.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/516.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5160.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5161.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5162.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5163.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5164.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5165.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5166.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5167.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5168.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5169.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/517.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5170.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5171.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5172.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5173.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5174.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5175.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5176.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5178.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5179.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/518.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5180.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5181.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5182.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5183.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5184.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5185.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5186.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5187.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5188.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5189.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/519.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5190.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5191.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5192.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5193.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5194.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5195.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5196.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5197.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5198.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5199.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/520.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5200.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5201.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5202.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5204.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5205.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5206.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5207.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5208.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5209.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/521.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5210.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5211.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5212.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5213.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5214.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5215.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5216.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5217.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5218.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5219.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/522.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5220.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5221.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5222.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5223.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5224.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5225.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5226.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5227.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5228.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5229.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/523.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5230.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5231.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5232.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5233.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5234.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5235.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5236.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5237.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5238.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5239.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/524.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5240.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5241.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5242.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5243.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5244.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5245.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5246.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5247.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5249.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/525.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5250.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5251.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5252.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5253.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5254.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5255.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5256.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5257.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/526.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5260.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5261.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5262.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5263.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5268.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5269.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/527.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5274.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5275.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5276.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5277.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5278.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5279.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/528.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5280.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5281.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5282.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5283.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5284.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5285.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5286.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5287.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5288.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5289.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/529.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5290.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5291.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5292.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5293.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5294.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5295.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5296.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5297.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/530.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5301.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5302.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5303.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5308.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5309.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/531.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5315.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5316.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5317.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5318.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5319.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/532.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5320.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5321.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5322.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5323.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5324.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5325.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5326.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5327.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5329.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/533.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5330.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5331.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5332.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5333.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5334.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5335.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5336.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5337.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/534.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5340.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5341.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5342.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5343.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5344.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5345.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5346.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5347.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5348.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5349.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/535.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5350.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5351.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5352.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5353.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5354.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5355.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5356.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5357.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5358.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5359.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/536.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5360.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5361.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5362.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5363.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5364.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5365.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5366.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5367.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5368.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5369.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/537.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5370.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5371.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5372.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5373.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5374.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5375.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5376.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5377.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5378.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5379.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/538.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5380.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5381.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5382.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5383.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5384.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5385.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5386.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5387.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5388.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5389.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/539.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5390.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5391.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5392.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5393.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5394.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5395.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5396.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5397.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5398.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5399.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5400.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5401.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5402.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5403.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5404.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5405.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5406.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5407.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5408.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5409.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5410.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5411.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5412.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5413.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5414.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5415.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5416.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5417.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5418.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5419.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5420.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5421.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5422.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5423.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5424.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5425.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5426.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5427.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5428.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5429.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5430.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5431.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5432.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5433.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5434.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5435.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5436.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5438.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5439.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/544.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5440.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5441.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5442.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5443.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5444.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5445.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5446.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5447.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5450.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5451.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5452.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5453.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5454.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5455.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5456.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5457.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5458.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5459.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/546.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5464.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5465.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5467.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5468.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/547.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5470.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5471.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5473.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5478.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5479.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/548.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5480.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5481.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5482.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5483.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5484.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5485.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5486.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5487.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/549.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5490.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5491.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5492.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5493.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5494.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5495.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5496.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5497.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5498.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/55.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/550.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5504.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5505.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5506.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5507.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5508.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5509.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5510.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5511.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5512.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5513.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5518.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5519.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/552.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5520.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5521.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5522.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5523.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5524.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5525.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5526.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5527.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/553.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5530.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5531.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5532.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5533.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5534.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5535.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5536.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5537.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5538.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5539.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5540.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5541.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5542.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5543.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5544.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5545.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5546.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5547.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5548.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5549.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5550.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5551.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5552.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5553.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5554.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5555.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5556.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5557.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5559.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5560.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5561.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5562.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5563.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5564.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5565.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5566.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5567.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5568.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5569.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5570.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5571.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5572.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5573.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5574.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5575.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5576.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5577.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5578.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5579.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/558.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5580.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5581.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5582.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5583.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5584.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5585.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5586.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5587.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5588.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5589.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/559.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5590.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5591.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5592.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5593.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5594.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5595.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5596.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5597.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5598.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5599.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/56.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/560.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5600.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5601.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5602.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5603.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5604.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5605.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5606.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5607.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5608.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5609.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/561.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5610.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5611.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5612.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5613.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5614.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5615.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5616.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5617.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5618.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/562.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5620.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5621.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5622.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5623.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5624.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5625.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5626.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5627.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5628.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5629.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/563.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5630.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5631.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5632.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5633.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5634.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5635.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5636.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5637.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5638.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5639.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/564.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5640.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5641.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5642.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5643.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5644.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5645.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5646.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5647.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/565.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5650.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5651.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5652.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5653.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5654.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5655.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5656.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5657.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5659.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/566.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5665.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5666.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5667.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5668.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5669.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/567.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5671.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5672.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5673.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5678.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5679.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5680.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5681.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5682.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5683.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5684.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5685.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5686.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5687.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5690.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5691.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5692.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5693.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5695.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5696.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5697.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5698.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5699.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/57.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/570.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5705.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5706.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5708.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5709.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/571.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5711.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5712.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5713.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5718.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5719.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/572.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5720.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5721.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5722.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5723.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5724.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5725.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5726.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5727.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/573.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5730.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5731.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5732.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5733.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5734.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5735.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5736.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5737.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5739.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/574.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5740.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5741.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5742.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5743.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5744.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5745.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5746.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5747.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5748.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5749.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/575.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5750.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5751.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5752.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5753.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5754.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5755.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5756.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5757.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5758.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5759.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/576.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5760.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5761.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5762.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5763.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5764.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5765.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5766.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5767.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5768.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5769.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/577.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5770.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5771.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5772.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5773.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5774.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5775.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5776.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5777.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5778.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5779.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/578.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5780.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5781.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5782.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5783.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5784.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5785.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5786.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5787.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5788.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5789.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5790.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5791.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5792.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5793.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5794.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5795.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5796.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5797.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5798.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5799.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/58.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5800.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5801.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5802.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5803.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5804.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5805.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5806.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5807.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5808.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5809.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5810.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5811.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5812.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5813.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5814.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5815.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5816.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5817.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5818.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5819.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5820.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5821.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5822.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5823.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5824.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5825.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5826.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5827.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5828.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5829.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5830.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5831.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5832.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5833.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5834.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5835.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5836.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5838.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5839.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/584.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5840.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5841.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5842.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5848.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5849.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/585.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5854.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5858.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5859.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/586.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5862.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5864.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5865.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5866.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/587.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5870.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5871.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5872.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5873.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5876.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/588.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5881.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5889.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/589.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5898.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5899.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/59.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/590.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5900.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5902.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5904.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5905.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5906.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5907.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5909.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5910.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5911.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5912.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5913.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5915.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5916.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/592.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/593.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5938.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5939.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5940.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5941.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5942.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5943.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5944.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5945.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5946.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5947.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5948.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5950.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5951.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5952.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5953.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5954.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5955.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5956.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5957.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5958.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5959.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5960.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5963.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5964.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5965.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5966.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5967.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5968.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5969.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5970.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5971.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5972.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5973.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5974.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5977.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5978.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5979.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/598.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5980.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5981.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5982.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5983.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5984.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5985.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5986.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5987.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5988.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/599.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5990.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5991.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5992.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5993.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5994.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5995.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5996.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5997.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5998.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/5999.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/60.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/600.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/6000.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/6002.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/601.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/602.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/603.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/604.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/605.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/606.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/607.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/61.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/610.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/612.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/613.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/614.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/615.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/616.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/617.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/618.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/619.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/62.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/624.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/625.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/626.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/628.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/629.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/63.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/630.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/631.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/632.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/638.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/639.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/64.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/640.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/641.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/642.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/643.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/644.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/645.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/646.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/647.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/648.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/649.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/65.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/650.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/651.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/652.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/653.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/654.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/655.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/656.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/657.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/658.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/659.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/66.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/660.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/661.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/662.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/663.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/664.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/665.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/666.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/667.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/668.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/669.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/67.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/670.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/671.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/672.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/673.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/674.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/675.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/676.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/677.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/678.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/679.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/680.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/681.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/682.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/683.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/684.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/685.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/686.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/687.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/688.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/689.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/69.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/690.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/691.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/692.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/693.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/694.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/695.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/696.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/697.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/698.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/699.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/7.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/70.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/700.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/701.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/702.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/703.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/704.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/705.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/706.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/707.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/708.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/709.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/71.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/710.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/711.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/712.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/713.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/714.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/715.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/716.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/717.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/718.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/719.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/72.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/720.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/721.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/722.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/723.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/724.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/725.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/726.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/727.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/728.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/729.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/73.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/730.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/731.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/732.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/733.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/734.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/735.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/736.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/737.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/738.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/739.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/74.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/744.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/745.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/746.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/748.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/749.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/75.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/750.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/751.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/752.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/758.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/759.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/76.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/760.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/761.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/762.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/763.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/764.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/765.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/766.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/767.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/77.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/770.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/771.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/772.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/773.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/774.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/775.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/776.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/777.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/778.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/779.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/785.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/786.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/787.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/788.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/789.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/791.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/792.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/793.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/798.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/799.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/8.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/80.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/801.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/802.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/803.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/808.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/809.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/81.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/816.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/817.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/818.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/819.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/82.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/820.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/821.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/822.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/823.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/824.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/825.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/826.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/827.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/829.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/830.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/831.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/832.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/833.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/834.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/835.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/836.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/837.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/840.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/841.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/842.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/843.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/844.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/845.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/846.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/847.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/848.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/849.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/850.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/851.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/852.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/853.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/854.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/855.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/856.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/857.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/858.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/859.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/860.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/861.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/862.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/863.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/864.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/865.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/866.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/867.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/868.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/869.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/870.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/871.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/872.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/873.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/874.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/875.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/876.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/877.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/878.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/879.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/88.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/880.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/882.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/883.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/884.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/885.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/886.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/887.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/888.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/889.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/89.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/890.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/891.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/892.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/893.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/894.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/895.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/896.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/897.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/898.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/899.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/9.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/900.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/901.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/902.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/903.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/904.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/905.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/906.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/907.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/908.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/909.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/910.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/911.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/912.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/913.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/914.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/915.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/916.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/917.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/918.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/919.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/920.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/921.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/922.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/923.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/924.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/925.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/926.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/927.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/928.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/929.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/930.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/931.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/932.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/933.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/934.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/935.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/936.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/937.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/938.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/939.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/94.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/941.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/942.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/943.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/944.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/945.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/946.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/947.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/949.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/95.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/950.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/951.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/952.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/953.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/954.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/955.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/956.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/957.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/96.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/961.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/962.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/963.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/968.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/969.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/975.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/976.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/977.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/978.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/979.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/98.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/980.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/981.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/982.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/983.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/984.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/985.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/986.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/987.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/988.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/989.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/99.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/990.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/991.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/992.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/993.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/994.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/995.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/996.png  \n",
            "  inflating: Face Mask Dataset/Train/WithoutMask/997.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1002.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1003.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1176.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1189.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1204.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1228.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1358.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1360.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1364.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1370.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1374.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1406.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/141.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1412.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1416.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/145.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/155.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1566.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1572.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1599.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1600.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1604.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1758.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1764.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1765.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1770.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1823.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1827.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1833.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/1837.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/186.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/2.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/226.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/232.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/237.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/357.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/384.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/394.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/40.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/419.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/421.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/425.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/431.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/50.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/540.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/568.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/569.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/579.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/582.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/583.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/596.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/6.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/627.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/68.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/743.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/747.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/753.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/757.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/794.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/800.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/804.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/810.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/83.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/838.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/958.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/964.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/974.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_100_9435902.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_101_8850689.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_102_8649172.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_104_1102091.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_106_6675239.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_107_6784686.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_109_7984988.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_110_8567370.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_114_3364673.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_115_2711402.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_117_3587471.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_118_4259143.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_119_2580982.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_11_3171615.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_121_379200.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_122_5203134.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_123_2830652.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_123_9676024.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_128_6301207.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_138_9014781.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_14_3524233.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_151_1277309.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_158_8653551.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_15_2242694.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_162_1393396.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_167_9046481.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_16_4823631.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_174_7520359.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_178_9249152.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_180_4100922.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_181_5284517.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_187_2356735.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_192_8838930.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_194_657463.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_196_3098367.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_196_4315702.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_1_474909.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_204_6292895.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_208_8296146.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_20_1833682.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_213_3727173.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_213_8352860.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_218_8902290.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_219_1551912.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_222_6307549.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_223_6160672.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_226_3796831.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_229_6187516.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_237_4145037.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_238_7487062.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_244_2337440.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_249_4198658.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_252_3266786.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_260_8364221.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_261_2404022.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_264_3012374.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_267_340957.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_269_6926347.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_26_1491145.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_270_7961872.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_271_797250.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_274_8884351.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_275_2098720.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_275_9941216.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_27_115573.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_283_41847.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_283_8303847.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_286_6572197.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_28_4264624.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_292_5674502.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_292_9020744.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_294_4057998.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_294_5142064.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_299_3309887.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_303_3510959.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_307_2835594.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_308_4081364.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_309_1399524.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_310_621262.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_314_996318.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_316_2280194.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_318_3562134.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_318_6242088.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_324_4622449.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_327_8547281.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_329_507832.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_32_7009027.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_32_7576986.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_338_8041465.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_350_8452092.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_352_5969246.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_355_1071607.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_356_7337301.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_358_4474074.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_360_3349583.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_361_717028.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_367_2745525.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_369_3311099.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_36_1688695.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_36_248219.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_371_7801466.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_372_6949552.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_373_6249885.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_373_7610631.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_374_8367574.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_383_1664054.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_386_6554172.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_387_4290791.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_391_3408619.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_391_691566.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_392_9173703.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_393_2288416.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_397_7423045.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_397_8681168.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_400_3880813.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_405_1295244.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_407_685906.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_407_9927816.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_412_2980275.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_415_1564436.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_418_9064306.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_426_1060542.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_427_4846957.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_427_6087315.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_429_5899144.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_437_5297943.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_438_2300390.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_43_6840668.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_440_4192142.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_440_7738924.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_441_1932841.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_441_9412325.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_442_4431013.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_442_7307692.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_443_139046.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_445_1081044.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_448_6755873.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_449_1572301.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_451_4846065.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_452_9886542.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_457_2821064.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_458_1415293.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_462_73745.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_469_4999927.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_472_1307712.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_474_6736896.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_476_4240039.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_477_829582.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_481_7431791.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_484_1266137.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_48_7638162.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_493_7622968.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_494_7849529.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_498_285827.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_504_9511834.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_507_1981962.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_511_7761345.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_513_5146302.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_516_7108985.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_51_6154284.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_521_3705314.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_525_6051624.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_525_848468.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_52_8715428.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_530_1610858.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_534_7277080.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_535_9787693.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_541_9770738.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_543_5384769.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_544_9645351.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_54_5815326.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_550_5248882.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_551_7034710.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_551_7990839.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_553_1817592.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_553_3993940.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_555_291879.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_557_3418402.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_558_1075577.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_558_9817812.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_558_9994689.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_560_1489576.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_560_9002345.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_562_2180820.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_563_8888014.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_565_8401386.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_567_8078492.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_567_9326492.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_569_5171519.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_56_1740171.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_56_2604059.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_574_2089326.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_575_2048048.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_579_5570178.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_57_313773.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_580_2383475.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_582_6061028.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_584_4416248.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_586_9062537.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_589_5152191.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_589_5689914.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_58_9082901.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_595_1973360.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_597_7481824.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_599_7140116.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_59_6381109.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_59_8705976.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_603_941903.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_604_1198811.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_60_4975028.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_617_1779630.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_61_5332557.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_627_1320431.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_629_4491260.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_632_9784191.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_633_6388002.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_646_6279001.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_646_7625934.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_646_8971496.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_648_1282958.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_64_8425129.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_652_2804611.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_653_5347485.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_654_1449318.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_654_6386034.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_654_771908.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_65_5555273.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_65_5620126.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_669_8270722.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_671_6587543.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_673_522164.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_675_7274061.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_676_3506674.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_678_5117780.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_679_5714490.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_68_9711296.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_692_7084601.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_699_4316078.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_702_7175504.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_702_8393723.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_713_1737728.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_713_5984829.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_716_6696342.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_721_4610762.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_725_3898100.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_726_3130124.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_727_5161110.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_728_496193.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_730_7920578.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_737_8095283.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_739_7630163.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_746_2875662.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_747_5251280.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_74_8503658.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_752_7637407.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_755_9444296.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_758_7744843.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_759_6095479.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_759_6630856.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_763_6505781.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_767_5473498.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_76_6239606.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_773_9264172.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_774_5823290.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_775_4552374.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_777_9008268.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_778_6581674.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_779_5919979.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_77_8116770.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_77_8651466.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_781_8542879.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_783_2922773.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_784_4473431.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_785_6419366.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_788_1812711.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_788_5881471.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_790_1846702.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_791_8155667.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_796_8095922.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_801_7122057.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_802_1145912.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_802_5827615.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_803_4661080.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_804_8605594.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_806_8045721.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_808_3391460.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_808_3539364.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_810_151971.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_814_5393885.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_815_1160800.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_815_1430967.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_815_2413146.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_816_9937591.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_81_3913905.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_821_6241055.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_823_7805914.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_825_3002588.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_827_1110266.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_830_5374471.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_831_5837469.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_832_3140616.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_833_8634013.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_840_9483771.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_843_475395.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_844_3462222.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_845_6155152.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_854_6274820.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_854_685362.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_858_4952494.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_85_4469742.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_860_3894617.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_863_3270136.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_863_5258905.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_866_708286.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_870_8874243.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_875_6360388.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_875_8976109.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_875_9605990.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_876_2889056.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_87_429586.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_884_7203896.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_885_6489537.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_886_2620879.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_886_6798542.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_888_4336364.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_890_2093095.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_891_25420.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_891_9937320.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_93_6842554.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_94_9701616.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_95_2277479.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_96_7557617.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithMask/Augmented_96_9491065.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1002.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1003.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1016.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1017.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1162.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1166.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1172.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1176.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1189.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1199.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1200.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1204.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1210.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1214.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1228.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1229.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1238.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1348.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1358.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1360.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1364.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1370.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1374.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1402.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1406.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/141.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1412.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/145.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/151.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/155.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1562.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1566.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1572.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1576.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1589.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1599.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1600.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1604.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1610.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1614.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1628.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1638.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/169.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1758.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1759.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1764.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1765.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1770.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1771.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/179.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/182.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1823.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1827.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1833.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1837.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/186.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/192.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1942.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1943.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1947.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1953.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1956.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1957.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/196.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1980.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1981.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1984.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1994.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/1995.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2043.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2046.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2047.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2053.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2057.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2080.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2084.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2090.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2094.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2123.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2127.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2133.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2137.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/223.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2244.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2245.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2250.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2251.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2255.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/226.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/227.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2278.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2279.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2282.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2286.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2287.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2292.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2293.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2296.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2309.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2319.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/232.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2321.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2325.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/233.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2331.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2335.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/237.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2443.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2447.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2453.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2457.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2480.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2484.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2490.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2494.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2522.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2523.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2527.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2533.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2536.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2537.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2641.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2645.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2651.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2655.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2669.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2679.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2682.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2686.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2692.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2696.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2709.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2719.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2720.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2721.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2725.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2731.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2735.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2862.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2866.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2872.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2876.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2889.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2899.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2902.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2906.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2912.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/2916.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3003.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3007.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3013.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3017.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3166.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3167.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3172.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3173.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3188.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3198.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3199.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3201.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3205.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3211.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3215.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3229.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3239.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3349.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3358.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3359.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3361.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3365.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3371.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3375.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3403.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3407.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3413.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3417.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/343.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/347.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/353.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3563.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3567.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/357.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3573.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3577.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3588.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3598.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3600.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3601.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3614.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3615.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3749.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3759.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3761.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3765.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3771.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3775.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/380.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3822.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3826.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3827.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3832.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3833.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3836.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/384.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/390.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/394.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3942.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3946.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3952.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3956.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3981.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3985.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3991.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/3995.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/40.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4022.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4026.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4032.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4036.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/409.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4142.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4146.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4147.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4152.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4153.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4156.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4181.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4184.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4185.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/419.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4190.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4191.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4195.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4208.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/421.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4218.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4220.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4224.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4230.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4234.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/425.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/431.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4340.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4344.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/435.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4350.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4351.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4354.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4368.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4378.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4387.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4393.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4397.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/44.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4422.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4426.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4432.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4436.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4437.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4542.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4546.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4552.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4556.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4581.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4585.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4591.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4595.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4608.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4609.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4620.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4621.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4624.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4634.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4635.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4740.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4744.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4750.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4754.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4768.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4778.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4783.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4793.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4797.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4803.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4806.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4807.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4812.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4813.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4817.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4963.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4967.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4973.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4977.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4988.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/4998.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/50.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5062.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5066.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5072.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5076.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5089.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5099.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5102.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5106.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5112.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5116.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5248.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5258.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5259.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5264.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5265.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5270.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5271.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5300.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5304.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5310.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5314.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5328.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5338.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/54.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/540.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/541.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/545.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5462.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5466.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5472.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5476.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5489.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5499.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5502.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5503.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/551.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5516.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5517.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/554.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/555.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5648.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5658.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5660.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5664.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5670.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5674.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/568.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/569.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5700.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5704.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5710.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5714.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5728.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5729.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5738.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/579.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/582.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/583.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5843.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5847.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5853.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5857.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5880.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5884.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5890.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5894.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5923.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5927.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5933.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/5937.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/596.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/597.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/6.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/623.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/627.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/633.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/637.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/68.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/743.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/747.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/753.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/78.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/780.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/784.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/790.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/794.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/800.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/804.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/810.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/814.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/828.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/83.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/87.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/93.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/948.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/958.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/960.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/964.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/965.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/97.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/970.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/971.png  \n",
            "  inflating: Face Mask Dataset/Validation/WithoutMask/974.png  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "27iQ9GZ3AcYQ"
      },
      "source": [
        "img=cv2.imread('/content/Face Mask Dataset/Train/WithMask/10.png')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "1WrWdPoaAhHF",
        "outputId": "12e3dd49-94db-4965-cee1-ac03e32da41e"
      },
      "source": [
        "plt.imshow(img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f74dae4e850>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hNEnlDt_Aju9",
        "outputId": "d605a010-6460-48a7-8732-c734585f43c4"
      },
      "source": [
        "img"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[236, 238, 239],\n",
              "        [236, 238, 239],\n",
              "        [236, 238, 239],\n",
              "        ...,\n",
              "        [192, 198, 203],\n",
              "        [193, 199, 204],\n",
              "        [193, 199, 204]],\n",
              "\n",
              "       [[235, 237, 238],\n",
              "        [236, 238, 239],\n",
              "        [238, 240, 241],\n",
              "        ...,\n",
              "        [180, 186, 191],\n",
              "        [187, 193, 198],\n",
              "        [188, 194, 199]],\n",
              "\n",
              "       [[235, 237, 238],\n",
              "        [236, 238, 239],\n",
              "        [238, 240, 241],\n",
              "        ...,\n",
              "        [189, 195, 200],\n",
              "        [186, 192, 197],\n",
              "        [187, 193, 198]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[236, 236, 236],\n",
              "        [235, 235, 235],\n",
              "        [235, 235, 235],\n",
              "        ...,\n",
              "        [148, 153, 152],\n",
              "        [147, 152, 151],\n",
              "        [148, 153, 152]],\n",
              "\n",
              "       [[236, 236, 236],\n",
              "        [236, 236, 236],\n",
              "        [235, 235, 235],\n",
              "        ...,\n",
              "        [148, 153, 152],\n",
              "        [147, 152, 151],\n",
              "        [148, 153, 152]],\n",
              "\n",
              "       [[235, 235, 235],\n",
              "        [235, 235, 235],\n",
              "        [234, 234, 234],\n",
              "        ...,\n",
              "        [147, 152, 151],\n",
              "        [147, 152, 151],\n",
              "        [148, 153, 152]]], dtype=uint8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KAO82MjkAm_y",
        "outputId": "7eabc144-6843-4302-d7e8-42bad84a8b30"
      },
      "source": [
        "img.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(82, 82, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uUtcB-jyAqTU"
      },
      "source": [
        "aug = ImageDataGenerator(\n",
        "  rescale=1./255,\n",
        "\trotation_range=20,\n",
        "\tzoom_range=0.15,\n",
        "\twidth_shift_range=0.2,\n",
        "\theight_shift_range=0.2,\n",
        "\tshear_range=0.15,\n",
        "\thorizontal_flip=True,\n",
        "\tfill_mode=\"nearest\"\n",
        "  )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tXe4kERPo8p1"
      },
      "source": [
        "**Data generator for training data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LOGydmYlAt4V",
        "outputId": "79535c40-7651-4e6e-be24-eb38b5dd370b"
      },
      "source": [
        "train_data=aug.flow_from_directory(\n",
        "    '/content/Face Mask Dataset/Train',\n",
        "    target_size=(224, 224),\n",
        "    color_mode='rgb',\n",
        "    class_mode='categorical',\n",
        "    batch_size=30,\n",
        "    shuffle=True\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 10000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7NeosrYAwra",
        "outputId": "7b7d8bbd-c94f-4cec-fe1c-ce17cb4d4bb8"
      },
      "source": [
        "train_data.class_indices"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'WithMask': 0, 'WithoutMask': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M4i9xRpvAz8o",
        "outputId": "9c144b90-794c-41d3-b46d-84aed9178efa"
      },
      "source": [
        "print(f'Length of training data = {train_data.samples}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Length of training data = 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ceRUgs7CA3q-"
      },
      "source": [
        "val=ImageDataGenerator(rescale=1./255)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PSn8RQh-phTF"
      },
      "source": [
        "**Data generator for validation data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0rHCp8KcA-r9",
        "outputId": "88d791c0-6d58-43f8-9e99-3e5790b50628"
      },
      "source": [
        "val_data=val.flow_from_directory(\n",
        "    '/content/Face Mask Dataset/Validation',\n",
        "    target_size=(224, 224),\n",
        "    color_mode='rgb',\n",
        "    class_mode='categorical',\n",
        "    batch_size=30,\n",
        "    shuffle=True\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 800 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ztPLi6iBpr5X"
      },
      "source": [
        "**CNN model architecture for image classification.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eOslIVzbBB4D",
        "outputId": "e401be2f-e779-474a-9bc7-988cba88e2cd"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Conv2D(512,(2,2),padding=\"same\",activation=\"relu\",input_shape=(224,224,3)))\n",
        "model.add(MaxPooling2D((2,2),strides=2))\n",
        "\n",
        "model.add(Conv2D(256,(2,2),padding=\"same\",activation=\"relu\"))\n",
        "model.add(MaxPooling2D((2,2),strides=2))\n",
        "\n",
        "model.add(Conv2D(128,(2,2),padding=\"same\",activation=\"relu\"))\n",
        "model.add(MaxPooling2D((2,2),strides=2))\n",
        "\n",
        "model.add(Conv2D(64,(2,2),padding=\"same\",activation=\"relu\"))\n",
        "model.add(MaxPooling2D((2,2),strides=2))\n",
        "\n",
        "model.add(Conv2D(32,(2,2),padding=\"same\",activation=\"relu\"))\n",
        "model.add(MaxPooling2D((2,2),strides=2))\n",
        "\n",
        "\n",
        "\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(64,activation=\"relu\"))\n",
        "model.add(Dense(2,activation=\"softmax\"))\n",
        "\n",
        "LR=0.0001\n",
        "opt = Adam(lr=LR)\n",
        "model.compile(loss=\"binary_crossentropy\",\n",
        "              optimizer=opt ,\n",
        "              metrics=[\"accuracy\"])\n",
        "#model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 224, 224, 512)     6656      \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 112, 112, 512)     0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 112, 112, 256)     524544    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 56, 56, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 56, 56, 128)       131200    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 28, 28, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 28, 28, 64)        32832     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 14, 14, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 14, 14, 32)        8224      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2 (None, 7, 7, 32)          0         \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 7, 7, 32)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1568)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 64)                100416    \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 2)                 130       \n",
            "=================================================================\n",
            "Total params: 804,002\n",
            "Trainable params: 804,002\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CCTc8pH1qV-f"
      },
      "source": [
        "**Training the CNN model for image classification.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qER4vzVwBIwD",
        "outputId": "86735ec0-94ce-4dfd-d61f-6fa026b93ef1"
      },
      "source": [
        "start = time.time()\n",
        "bs=32\n",
        "H = model.fit_generator(\n",
        "    train_data,\n",
        "    steps_per_epoch=train_data.samples// bs,\n",
        "\t  validation_data=val_data,\n",
        "\t  validation_steps=val_data.samples// bs,\n",
        "\t  epochs=20)\n",
        "\n",
        "end = time.time()\n",
        "print(\"Total train time: \",(end-start)/60,\" mins\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "312/312 [==============================] - 133s 427ms/step - loss: 0.3412 - accuracy: 0.8627 - val_loss: 0.1444 - val_accuracy: 0.9440\n",
            "Epoch 2/20\n",
            "312/312 [==============================] - 133s 425ms/step - loss: 0.1911 - accuracy: 0.9266 - val_loss: 0.1222 - val_accuracy: 0.9613\n",
            "Epoch 3/20\n",
            "312/312 [==============================] - 132s 423ms/step - loss: 0.1687 - accuracy: 0.9350 - val_loss: 0.1001 - val_accuracy: 0.9667\n",
            "Epoch 4/20\n",
            "312/312 [==============================] - 133s 425ms/step - loss: 0.1709 - accuracy: 0.9383 - val_loss: 0.0953 - val_accuracy: 0.9667\n",
            "Epoch 5/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.1519 - accuracy: 0.9440 - val_loss: 0.0838 - val_accuracy: 0.9747\n",
            "Epoch 6/20\n",
            "312/312 [==============================] - 133s 425ms/step - loss: 0.1465 - accuracy: 0.9498 - val_loss: 0.0772 - val_accuracy: 0.9720\n",
            "Epoch 7/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.1386 - accuracy: 0.9507 - val_loss: 0.0839 - val_accuracy: 0.9747\n",
            "Epoch 8/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.1356 - accuracy: 0.9513 - val_loss: 0.0932 - val_accuracy: 0.9640\n",
            "Epoch 9/20\n",
            "312/312 [==============================] - 133s 425ms/step - loss: 0.1314 - accuracy: 0.9536 - val_loss: 0.0754 - val_accuracy: 0.9773\n",
            "Epoch 10/20\n",
            "312/312 [==============================] - 132s 423ms/step - loss: 0.1292 - accuracy: 0.9524 - val_loss: 0.1089 - val_accuracy: 0.9680\n",
            "Epoch 11/20\n",
            "312/312 [==============================] - 132s 423ms/step - loss: 0.1298 - accuracy: 0.9551 - val_loss: 0.1155 - val_accuracy: 0.9600\n",
            "Epoch 12/20\n",
            "312/312 [==============================] - 133s 424ms/step - loss: 0.1189 - accuracy: 0.9591 - val_loss: 0.0790 - val_accuracy: 0.9733\n",
            "Epoch 13/20\n",
            "312/312 [==============================] - 133s 424ms/step - loss: 0.1189 - accuracy: 0.9558 - val_loss: 0.0633 - val_accuracy: 0.9787\n",
            "Epoch 14/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.1095 - accuracy: 0.9630 - val_loss: 0.0530 - val_accuracy: 0.9840\n",
            "Epoch 15/20\n",
            "312/312 [==============================] - 132s 423ms/step - loss: 0.1039 - accuracy: 0.9655 - val_loss: 0.0701 - val_accuracy: 0.9733\n",
            "Epoch 16/20\n",
            "312/312 [==============================] - 132s 423ms/step - loss: 0.1052 - accuracy: 0.9639 - val_loss: 0.0533 - val_accuracy: 0.9840\n",
            "Epoch 17/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.1078 - accuracy: 0.9625 - val_loss: 0.0574 - val_accuracy: 0.9800\n",
            "Epoch 18/20\n",
            "312/312 [==============================] - 132s 424ms/step - loss: 0.0934 - accuracy: 0.9679 - val_loss: 0.0461 - val_accuracy: 0.9840\n",
            "Epoch 19/20\n",
            "312/312 [==============================] - 133s 425ms/step - loss: 0.0986 - accuracy: 0.9653 - val_loss: 0.0423 - val_accuracy: 0.9853\n",
            "Epoch 20/20\n",
            "312/312 [==============================] - 133s 426ms/step - loss: 0.0860 - accuracy: 0.9721 - val_loss: 0.0372 - val_accuracy: 0.9893\n",
            "Total train time:  44.18051775693893  mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f-OLWhkOBdKC",
        "outputId": "5b81cba9-f2a0-4a72-8f41-b45a3d67c7f0"
      },
      "source": [
        "print(H.history.keys())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6GPuKC4iNPkL",
        "outputId": "dd5a4f3f-2d9d-4daf-fd66-508057d23964"
      },
      "source": [
        "H.history['loss']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3411880135536194,\n",
              " 0.19109132885932922,\n",
              " 0.16874659061431885,\n",
              " 0.17087027430534363,\n",
              " 0.15190355479717255,\n",
              " 0.14647388458251953,\n",
              " 0.1385989636182785,\n",
              " 0.13562582433223724,\n",
              " 0.13140065968036652,\n",
              " 0.12922807037830353,\n",
              " 0.1298217624425888,\n",
              " 0.1189134493470192,\n",
              " 0.11892913281917572,\n",
              " 0.10949244350194931,\n",
              " 0.1038719117641449,\n",
              " 0.1051664724946022,\n",
              " 0.10775744915008545,\n",
              " 0.09337072819471359,\n",
              " 0.09860314428806305,\n",
              " 0.08598803728818893]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UDzVKeEqTsvu"
      },
      "source": [
        "test_datagen = ImageDataGenerator(rescale=1./255)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s-TGCRvcTuqb",
        "outputId": "21bc4852-0edd-4ac0-c7d9-e96f19fe332f"
      },
      "source": [
        "test_generator = test_datagen.flow_from_directory(\n",
        "        '/content/Face Mask Dataset/Test' ,\n",
        "        target_size=(224, 224),\n",
        "        color_mode=\"rgb\",\n",
        "        class_mode='categorical',\n",
        "        batch_size=32\n",
        "        #shuffle=False\n",
        "        )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 992 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_VOHZXwcZzLz",
        "outputId": "b6455676-f61c-49c5-c282-6ee8c7680525"
      },
      "source": [
        "test_generator.class_indices"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'WithMask': 0, 'WithoutMask': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y3eEQRQQNX7S",
        "outputId": "85dc0452-c50f-4ce8-a6dc-f64d574ed66d"
      },
      "source": [
        "bs=32\n",
        "predict = model.predict_generator(test_generator, steps=test_generator.samples// bs,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "31/31 [==============================] - 5s 79ms/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "emaq3cEhNYrR"
      },
      "source": [
        "predict = np.argmax(predict, axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eljr6FzoNeUI",
        "outputId": "e3e18c34-2f2e-4396-bdc9-845553c4b734"
      },
      "source": [
        "print('Confusion Matrix :')\n",
        "confusion_matrix(test_generator.classes,predict)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion Matrix :\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[247, 236],\n",
              "       [239, 270]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwx4XehuNhBN",
        "outputId": "13e0cc80-6f57-4bb8-969a-03fbe56fa08f"
      },
      "source": [
        "print('Classification Report :')\n",
        "targets=['mask' , 'without_mask']\n",
        "print(classification_report(test_generator.classes, predict,target_names=targets))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Classification Report :\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        mask       0.51      0.51      0.51       483\n",
            "without_mask       0.53      0.53      0.53       509\n",
            "\n",
            "    accuracy                           0.52       992\n",
            "   macro avg       0.52      0.52      0.52       992\n",
            "weighted avg       0.52      0.52      0.52       992\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SZycj8vHnNUl"
      },
      "source": [
        "loss, acc = model.evaluate_generator(test_generator, steps=3, verbose=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kf5OOkGww0CA",
        "outputId": "458de4f5-f197-4081-84db-5b213a776da4"
      },
      "source": [
        "print(f'Loss for the testing data ={loss}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loss for the testing data =0.055894482880830765\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IAhDRDWNw3_P",
        "outputId": "81aa78cf-960c-4e24-98e2-53d1b7a9dd11"
      },
      "source": [
        "print(f'Accurcy for testing data= {acc}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accurcy for testing data= 0.9895833134651184\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W9X4nLpINkEb"
      },
      "source": [
        "model.save(\"mask_detector.model\", save_format=\"h5\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "ErVTnOEphnxx",
        "outputId": "af8b042b-301a-4c60-cffd-6b986467abb8"
      },
      "source": [
        "model = load_model('/content/mask_detector.model')\n",
        "\n",
        "img = cv2.imread('/content/img2.jpg')\n",
        "img = cv2.resize(img,(224,224))\n",
        "plt.imshow(img)\n",
        "img = np.reshape(img,[1,224,224,3])\n",
        "\n",
        "classes = model.predict_classes(img)\n",
        "print(classes)\n",
        "if classes==0:\n",
        "  print('mask')\n",
        "else:\n",
        "  print('without mask')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:9 out of the last 11 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f0b662425f0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
            "[0]\n",
            "mask\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "F8zHZSfANnpU",
        "outputId": "c07cae37-62b1-4caa-cfb4-a5b68e7a94d9"
      },
      "source": [
        "plt.plot(H.history['accuracy'])\n",
        "plt.plot(H.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "icquqhs-NtYx",
        "outputId": "5e1c2414-a162-4d78-820d-34184bbe76ba"
      },
      "source": [
        "plt.plot(H.history['loss'])\n",
        "plt.plot(H.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper right')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SVYnpIXzdM9F"
      },
      "source": [
        "**Image classification model using Transfer Learning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AGi98fr45oD_",
        "outputId": "464ffba2-5eeb-40c9-d482-7761b5293de9"
      },
      "source": [
        "baseModel = MobileNetV2(weights=\"imagenet\", include_top=False,input_shape=(224, 224, 3))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
            "9412608/9406464 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPcqgoKY5yJA",
        "outputId": "04594326-fbd0-42ab-94da-15de75ce0974"
      },
      "source": [
        "baseModel.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"mobilenetv2_1.00_224\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 224, 224, 3) 0                                            \n",
            "__________________________________________________________________________________________________\n",
            "Conv1 (Conv2D)                  (None, 112, 112, 32) 864         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bn_Conv1 (BatchNormalization)   (None, 112, 112, 32) 128         Conv1[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "Conv1_relu (ReLU)               (None, 112, 112, 32) 0           bn_Conv1[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise (Depthw (None, 112, 112, 32) 288         Conv1_relu[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise_BN (Bat (None, 112, 112, 32) 128         expanded_conv_depthwise[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise_relu (R (None, 112, 112, 32) 0           expanded_conv_depthwise_BN[0][0] \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_project (Conv2D)  (None, 112, 112, 16) 512         expanded_conv_depthwise_relu[0][0\n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_project_BN (Batch (None, 112, 112, 16) 64          expanded_conv_project[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand (Conv2D)         (None, 112, 112, 96) 1536        expanded_conv_project_BN[0][0]   \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand_BN (BatchNormali (None, 112, 112, 96) 384         block_1_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand_relu (ReLU)      (None, 112, 112, 96) 0           block_1_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_1_pad (ZeroPadding2D)     (None, 113, 113, 96) 0           block_1_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise (DepthwiseCon (None, 56, 56, 96)   864         block_1_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise_BN (BatchNorm (None, 56, 56, 96)   384         block_1_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise_relu (ReLU)   (None, 56, 56, 96)   0           block_1_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_1_project (Conv2D)        (None, 56, 56, 24)   2304        block_1_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_1_project_BN (BatchNormal (None, 56, 56, 24)   96          block_1_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand (Conv2D)         (None, 56, 56, 144)  3456        block_1_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand_BN (BatchNormali (None, 56, 56, 144)  576         block_2_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand_relu (ReLU)      (None, 56, 56, 144)  0           block_2_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise (DepthwiseCon (None, 56, 56, 144)  1296        block_2_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise_BN (BatchNorm (None, 56, 56, 144)  576         block_2_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise_relu (ReLU)   (None, 56, 56, 144)  0           block_2_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_2_project (Conv2D)        (None, 56, 56, 24)   3456        block_2_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_2_project_BN (BatchNormal (None, 56, 56, 24)   96          block_2_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_2_add (Add)               (None, 56, 56, 24)   0           block_1_project_BN[0][0]         \n",
            "                                                                 block_2_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand (Conv2D)         (None, 56, 56, 144)  3456        block_2_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand_BN (BatchNormali (None, 56, 56, 144)  576         block_3_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand_relu (ReLU)      (None, 56, 56, 144)  0           block_3_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_3_pad (ZeroPadding2D)     (None, 57, 57, 144)  0           block_3_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise (DepthwiseCon (None, 28, 28, 144)  1296        block_3_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise_BN (BatchNorm (None, 28, 28, 144)  576         block_3_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise_relu (ReLU)   (None, 28, 28, 144)  0           block_3_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_3_project (Conv2D)        (None, 28, 28, 32)   4608        block_3_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_3_project_BN (BatchNormal (None, 28, 28, 32)   128         block_3_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand (Conv2D)         (None, 28, 28, 192)  6144        block_3_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_4_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_4_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise (DepthwiseCon (None, 28, 28, 192)  1728        block_4_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise_BN (BatchNorm (None, 28, 28, 192)  768         block_4_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise_relu (ReLU)   (None, 28, 28, 192)  0           block_4_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_4_project (Conv2D)        (None, 28, 28, 32)   6144        block_4_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_4_project_BN (BatchNormal (None, 28, 28, 32)   128         block_4_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_4_add (Add)               (None, 28, 28, 32)   0           block_3_project_BN[0][0]         \n",
            "                                                                 block_4_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand (Conv2D)         (None, 28, 28, 192)  6144        block_4_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_5_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_5_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise (DepthwiseCon (None, 28, 28, 192)  1728        block_5_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise_BN (BatchNorm (None, 28, 28, 192)  768         block_5_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise_relu (ReLU)   (None, 28, 28, 192)  0           block_5_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_5_project (Conv2D)        (None, 28, 28, 32)   6144        block_5_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_5_project_BN (BatchNormal (None, 28, 28, 32)   128         block_5_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_5_add (Add)               (None, 28, 28, 32)   0           block_4_add[0][0]                \n",
            "                                                                 block_5_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand (Conv2D)         (None, 28, 28, 192)  6144        block_5_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_6_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_6_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_6_pad (ZeroPadding2D)     (None, 29, 29, 192)  0           block_6_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise (DepthwiseCon (None, 14, 14, 192)  1728        block_6_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise_BN (BatchNorm (None, 14, 14, 192)  768         block_6_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise_relu (ReLU)   (None, 14, 14, 192)  0           block_6_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_6_project (Conv2D)        (None, 14, 14, 64)   12288       block_6_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_6_project_BN (BatchNormal (None, 14, 14, 64)   256         block_6_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand (Conv2D)         (None, 14, 14, 384)  24576       block_6_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_7_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_7_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_7_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_7_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_7_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_7_project (Conv2D)        (None, 14, 14, 64)   24576       block_7_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_7_project_BN (BatchNormal (None, 14, 14, 64)   256         block_7_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_7_add (Add)               (None, 14, 14, 64)   0           block_6_project_BN[0][0]         \n",
            "                                                                 block_7_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand (Conv2D)         (None, 14, 14, 384)  24576       block_7_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_8_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_8_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_8_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_8_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_8_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_8_project (Conv2D)        (None, 14, 14, 64)   24576       block_8_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_8_project_BN (BatchNormal (None, 14, 14, 64)   256         block_8_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_8_add (Add)               (None, 14, 14, 64)   0           block_7_add[0][0]                \n",
            "                                                                 block_8_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand (Conv2D)         (None, 14, 14, 384)  24576       block_8_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_9_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_9_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_9_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_9_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_9_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_9_project (Conv2D)        (None, 14, 14, 64)   24576       block_9_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_9_project_BN (BatchNormal (None, 14, 14, 64)   256         block_9_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_9_add (Add)               (None, 14, 14, 64)   0           block_8_add[0][0]                \n",
            "                                                                 block_9_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand (Conv2D)        (None, 14, 14, 384)  24576       block_9_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand_BN (BatchNormal (None, 14, 14, 384)  1536        block_10_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand_relu (ReLU)     (None, 14, 14, 384)  0           block_10_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise (DepthwiseCo (None, 14, 14, 384)  3456        block_10_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise_BN (BatchNor (None, 14, 14, 384)  1536        block_10_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise_relu (ReLU)  (None, 14, 14, 384)  0           block_10_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_10_project (Conv2D)       (None, 14, 14, 96)   36864       block_10_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_10_project_BN (BatchNorma (None, 14, 14, 96)   384         block_10_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand (Conv2D)        (None, 14, 14, 576)  55296       block_10_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_11_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_11_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise (DepthwiseCo (None, 14, 14, 576)  5184        block_11_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise_BN (BatchNor (None, 14, 14, 576)  2304        block_11_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise_relu (ReLU)  (None, 14, 14, 576)  0           block_11_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_11_project (Conv2D)       (None, 14, 14, 96)   55296       block_11_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_11_project_BN (BatchNorma (None, 14, 14, 96)   384         block_11_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_11_add (Add)              (None, 14, 14, 96)   0           block_10_project_BN[0][0]        \n",
            "                                                                 block_11_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand (Conv2D)        (None, 14, 14, 576)  55296       block_11_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_12_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_12_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise (DepthwiseCo (None, 14, 14, 576)  5184        block_12_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise_BN (BatchNor (None, 14, 14, 576)  2304        block_12_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise_relu (ReLU)  (None, 14, 14, 576)  0           block_12_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_12_project (Conv2D)       (None, 14, 14, 96)   55296       block_12_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_12_project_BN (BatchNorma (None, 14, 14, 96)   384         block_12_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_12_add (Add)              (None, 14, 14, 96)   0           block_11_add[0][0]               \n",
            "                                                                 block_12_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand (Conv2D)        (None, 14, 14, 576)  55296       block_12_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_13_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_13_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_13_pad (ZeroPadding2D)    (None, 15, 15, 576)  0           block_13_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise (DepthwiseCo (None, 7, 7, 576)    5184        block_13_pad[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise_BN (BatchNor (None, 7, 7, 576)    2304        block_13_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise_relu (ReLU)  (None, 7, 7, 576)    0           block_13_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_13_project (Conv2D)       (None, 7, 7, 160)    92160       block_13_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_13_project_BN (BatchNorma (None, 7, 7, 160)    640         block_13_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand (Conv2D)        (None, 7, 7, 960)    153600      block_13_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_14_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_14_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_14_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_14_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_14_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_14_project (Conv2D)       (None, 7, 7, 160)    153600      block_14_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_14_project_BN (BatchNorma (None, 7, 7, 160)    640         block_14_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_14_add (Add)              (None, 7, 7, 160)    0           block_13_project_BN[0][0]        \n",
            "                                                                 block_14_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand (Conv2D)        (None, 7, 7, 960)    153600      block_14_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_15_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_15_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_15_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_15_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_15_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_15_project (Conv2D)       (None, 7, 7, 160)    153600      block_15_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_15_project_BN (BatchNorma (None, 7, 7, 160)    640         block_15_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_15_add (Add)              (None, 7, 7, 160)    0           block_14_add[0][0]               \n",
            "                                                                 block_15_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand (Conv2D)        (None, 7, 7, 960)    153600      block_15_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_16_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_16_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_16_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_16_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_16_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_16_project (Conv2D)       (None, 7, 7, 320)    307200      block_16_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_16_project_BN (BatchNorma (None, 7, 7, 320)    1280        block_16_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "Conv_1 (Conv2D)                 (None, 7, 7, 1280)   409600      block_16_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "Conv_1_bn (BatchNormalization)  (None, 7, 7, 1280)   5120        Conv_1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "out_relu (ReLU)                 (None, 7, 7, 1280)   0           Conv_1_bn[0][0]                  \n",
            "==================================================================================================\n",
            "Total params: 2,257,984\n",
            "Trainable params: 2,223,872\n",
            "Non-trainable params: 34,112\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5KCs9CcG561R"
      },
      "source": [
        "headModel = baseModel.output\n",
        "headModel = AveragePooling2D(pool_size=(7, 7))(headModel)\n",
        "headModel = Flatten(name=\"flatten\")(headModel)\n",
        "headModel = Dense(128, activation=\"relu\")(headModel)\n",
        "headModel = Dropout(0.5)(headModel)\n",
        "headModel = Dense(2, activation=\"softmax\")(headModel)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBU8r2QT58Sk"
      },
      "source": [
        "model_2 = Model(inputs=baseModel.input, outputs=headModel)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IylpXQRj6BhT"
      },
      "source": [
        "for layer in baseModel.layers:\n",
        "\tlayer.trainable = False"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFM1AbNs6G33",
        "outputId": "7e22d3ce-d22a-4aa4-d600-cb53ef6b6957"
      },
      "source": [
        "model_2.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 224, 224, 3) 0                                            \n",
            "__________________________________________________________________________________________________\n",
            "Conv1 (Conv2D)                  (None, 112, 112, 32) 864         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bn_Conv1 (BatchNormalization)   (None, 112, 112, 32) 128         Conv1[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "Conv1_relu (ReLU)               (None, 112, 112, 32) 0           bn_Conv1[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise (Depthw (None, 112, 112, 32) 288         Conv1_relu[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise_BN (Bat (None, 112, 112, 32) 128         expanded_conv_depthwise[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_depthwise_relu (R (None, 112, 112, 32) 0           expanded_conv_depthwise_BN[0][0] \n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_project (Conv2D)  (None, 112, 112, 16) 512         expanded_conv_depthwise_relu[0][0\n",
            "__________________________________________________________________________________________________\n",
            "expanded_conv_project_BN (Batch (None, 112, 112, 16) 64          expanded_conv_project[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand (Conv2D)         (None, 112, 112, 96) 1536        expanded_conv_project_BN[0][0]   \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand_BN (BatchNormali (None, 112, 112, 96) 384         block_1_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_1_expand_relu (ReLU)      (None, 112, 112, 96) 0           block_1_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_1_pad (ZeroPadding2D)     (None, 113, 113, 96) 0           block_1_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise (DepthwiseCon (None, 56, 56, 96)   864         block_1_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise_BN (BatchNorm (None, 56, 56, 96)   384         block_1_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_1_depthwise_relu (ReLU)   (None, 56, 56, 96)   0           block_1_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_1_project (Conv2D)        (None, 56, 56, 24)   2304        block_1_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_1_project_BN (BatchNormal (None, 56, 56, 24)   96          block_1_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand (Conv2D)         (None, 56, 56, 144)  3456        block_1_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand_BN (BatchNormali (None, 56, 56, 144)  576         block_2_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_2_expand_relu (ReLU)      (None, 56, 56, 144)  0           block_2_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise (DepthwiseCon (None, 56, 56, 144)  1296        block_2_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise_BN (BatchNorm (None, 56, 56, 144)  576         block_2_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_2_depthwise_relu (ReLU)   (None, 56, 56, 144)  0           block_2_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_2_project (Conv2D)        (None, 56, 56, 24)   3456        block_2_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_2_project_BN (BatchNormal (None, 56, 56, 24)   96          block_2_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_2_add (Add)               (None, 56, 56, 24)   0           block_1_project_BN[0][0]         \n",
            "                                                                 block_2_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand (Conv2D)         (None, 56, 56, 144)  3456        block_2_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand_BN (BatchNormali (None, 56, 56, 144)  576         block_3_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_3_expand_relu (ReLU)      (None, 56, 56, 144)  0           block_3_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_3_pad (ZeroPadding2D)     (None, 57, 57, 144)  0           block_3_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise (DepthwiseCon (None, 28, 28, 144)  1296        block_3_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise_BN (BatchNorm (None, 28, 28, 144)  576         block_3_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_3_depthwise_relu (ReLU)   (None, 28, 28, 144)  0           block_3_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_3_project (Conv2D)        (None, 28, 28, 32)   4608        block_3_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_3_project_BN (BatchNormal (None, 28, 28, 32)   128         block_3_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand (Conv2D)         (None, 28, 28, 192)  6144        block_3_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_4_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_4_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_4_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise (DepthwiseCon (None, 28, 28, 192)  1728        block_4_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise_BN (BatchNorm (None, 28, 28, 192)  768         block_4_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_4_depthwise_relu (ReLU)   (None, 28, 28, 192)  0           block_4_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_4_project (Conv2D)        (None, 28, 28, 32)   6144        block_4_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_4_project_BN (BatchNormal (None, 28, 28, 32)   128         block_4_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_4_add (Add)               (None, 28, 28, 32)   0           block_3_project_BN[0][0]         \n",
            "                                                                 block_4_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand (Conv2D)         (None, 28, 28, 192)  6144        block_4_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_5_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_5_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_5_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise (DepthwiseCon (None, 28, 28, 192)  1728        block_5_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise_BN (BatchNorm (None, 28, 28, 192)  768         block_5_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_5_depthwise_relu (ReLU)   (None, 28, 28, 192)  0           block_5_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_5_project (Conv2D)        (None, 28, 28, 32)   6144        block_5_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_5_project_BN (BatchNormal (None, 28, 28, 32)   128         block_5_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_5_add (Add)               (None, 28, 28, 32)   0           block_4_add[0][0]                \n",
            "                                                                 block_5_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand (Conv2D)         (None, 28, 28, 192)  6144        block_5_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand_BN (BatchNormali (None, 28, 28, 192)  768         block_6_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_6_expand_relu (ReLU)      (None, 28, 28, 192)  0           block_6_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_6_pad (ZeroPadding2D)     (None, 29, 29, 192)  0           block_6_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise (DepthwiseCon (None, 14, 14, 192)  1728        block_6_pad[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise_BN (BatchNorm (None, 14, 14, 192)  768         block_6_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_6_depthwise_relu (ReLU)   (None, 14, 14, 192)  0           block_6_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_6_project (Conv2D)        (None, 14, 14, 64)   12288       block_6_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_6_project_BN (BatchNormal (None, 14, 14, 64)   256         block_6_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand (Conv2D)         (None, 14, 14, 384)  24576       block_6_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_7_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_7_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_7_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_7_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_7_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_7_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_7_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_7_project (Conv2D)        (None, 14, 14, 64)   24576       block_7_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_7_project_BN (BatchNormal (None, 14, 14, 64)   256         block_7_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_7_add (Add)               (None, 14, 14, 64)   0           block_6_project_BN[0][0]         \n",
            "                                                                 block_7_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand (Conv2D)         (None, 14, 14, 384)  24576       block_7_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_8_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_8_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_8_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_8_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_8_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_8_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_8_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_8_project (Conv2D)        (None, 14, 14, 64)   24576       block_8_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_8_project_BN (BatchNormal (None, 14, 14, 64)   256         block_8_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_8_add (Add)               (None, 14, 14, 64)   0           block_7_add[0][0]                \n",
            "                                                                 block_8_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand (Conv2D)         (None, 14, 14, 384)  24576       block_8_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand_BN (BatchNormali (None, 14, 14, 384)  1536        block_9_expand[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "block_9_expand_relu (ReLU)      (None, 14, 14, 384)  0           block_9_expand_BN[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise (DepthwiseCon (None, 14, 14, 384)  3456        block_9_expand_relu[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise_BN (BatchNorm (None, 14, 14, 384)  1536        block_9_depthwise[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "block_9_depthwise_relu (ReLU)   (None, 14, 14, 384)  0           block_9_depthwise_BN[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_9_project (Conv2D)        (None, 14, 14, 64)   24576       block_9_depthwise_relu[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "block_9_project_BN (BatchNormal (None, 14, 14, 64)   256         block_9_project[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_9_add (Add)               (None, 14, 14, 64)   0           block_8_add[0][0]                \n",
            "                                                                 block_9_project_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand (Conv2D)        (None, 14, 14, 384)  24576       block_9_add[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand_BN (BatchNormal (None, 14, 14, 384)  1536        block_10_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_10_expand_relu (ReLU)     (None, 14, 14, 384)  0           block_10_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise (DepthwiseCo (None, 14, 14, 384)  3456        block_10_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise_BN (BatchNor (None, 14, 14, 384)  1536        block_10_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_10_depthwise_relu (ReLU)  (None, 14, 14, 384)  0           block_10_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_10_project (Conv2D)       (None, 14, 14, 96)   36864       block_10_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_10_project_BN (BatchNorma (None, 14, 14, 96)   384         block_10_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand (Conv2D)        (None, 14, 14, 576)  55296       block_10_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_11_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_11_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_11_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise (DepthwiseCo (None, 14, 14, 576)  5184        block_11_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise_BN (BatchNor (None, 14, 14, 576)  2304        block_11_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_11_depthwise_relu (ReLU)  (None, 14, 14, 576)  0           block_11_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_11_project (Conv2D)       (None, 14, 14, 96)   55296       block_11_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_11_project_BN (BatchNorma (None, 14, 14, 96)   384         block_11_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_11_add (Add)              (None, 14, 14, 96)   0           block_10_project_BN[0][0]        \n",
            "                                                                 block_11_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand (Conv2D)        (None, 14, 14, 576)  55296       block_11_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_12_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_12_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_12_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise (DepthwiseCo (None, 14, 14, 576)  5184        block_12_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise_BN (BatchNor (None, 14, 14, 576)  2304        block_12_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_12_depthwise_relu (ReLU)  (None, 14, 14, 576)  0           block_12_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_12_project (Conv2D)       (None, 14, 14, 96)   55296       block_12_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_12_project_BN (BatchNorma (None, 14, 14, 96)   384         block_12_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_12_add (Add)              (None, 14, 14, 96)   0           block_11_add[0][0]               \n",
            "                                                                 block_12_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand (Conv2D)        (None, 14, 14, 576)  55296       block_12_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand_BN (BatchNormal (None, 14, 14, 576)  2304        block_13_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_13_expand_relu (ReLU)     (None, 14, 14, 576)  0           block_13_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_13_pad (ZeroPadding2D)    (None, 15, 15, 576)  0           block_13_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise (DepthwiseCo (None, 7, 7, 576)    5184        block_13_pad[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise_BN (BatchNor (None, 7, 7, 576)    2304        block_13_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_13_depthwise_relu (ReLU)  (None, 7, 7, 576)    0           block_13_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_13_project (Conv2D)       (None, 7, 7, 160)    92160       block_13_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_13_project_BN (BatchNorma (None, 7, 7, 160)    640         block_13_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand (Conv2D)        (None, 7, 7, 960)    153600      block_13_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_14_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_14_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_14_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_14_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_14_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_14_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_14_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_14_project (Conv2D)       (None, 7, 7, 160)    153600      block_14_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_14_project_BN (BatchNorma (None, 7, 7, 160)    640         block_14_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_14_add (Add)              (None, 7, 7, 160)    0           block_13_project_BN[0][0]        \n",
            "                                                                 block_14_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand (Conv2D)        (None, 7, 7, 960)    153600      block_14_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_15_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_15_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_15_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_15_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_15_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_15_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_15_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_15_project (Conv2D)       (None, 7, 7, 160)    153600      block_15_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_15_project_BN (BatchNorma (None, 7, 7, 160)    640         block_15_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "block_15_add (Add)              (None, 7, 7, 160)    0           block_14_add[0][0]               \n",
            "                                                                 block_15_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand (Conv2D)        (None, 7, 7, 960)    153600      block_15_add[0][0]               \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand_BN (BatchNormal (None, 7, 7, 960)    3840        block_16_expand[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "block_16_expand_relu (ReLU)     (None, 7, 7, 960)    0           block_16_expand_BN[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise (DepthwiseCo (None, 7, 7, 960)    8640        block_16_expand_relu[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise_BN (BatchNor (None, 7, 7, 960)    3840        block_16_depthwise[0][0]         \n",
            "__________________________________________________________________________________________________\n",
            "block_16_depthwise_relu (ReLU)  (None, 7, 7, 960)    0           block_16_depthwise_BN[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "block_16_project (Conv2D)       (None, 7, 7, 320)    307200      block_16_depthwise_relu[0][0]    \n",
            "__________________________________________________________________________________________________\n",
            "block_16_project_BN (BatchNorma (None, 7, 7, 320)    1280        block_16_project[0][0]           \n",
            "__________________________________________________________________________________________________\n",
            "Conv_1 (Conv2D)                 (None, 7, 7, 1280)   409600      block_16_project_BN[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "Conv_1_bn (BatchNormalization)  (None, 7, 7, 1280)   5120        Conv_1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "out_relu (ReLU)                 (None, 7, 7, 1280)   0           Conv_1_bn[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "average_pooling2d (AveragePooli (None, 1, 1, 1280)   0           out_relu[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "flatten (Flatten)               (None, 1280)         0           average_pooling2d[0][0]          \n",
            "__________________________________________________________________________________________________\n",
            "dense_2 (Dense)                 (None, 128)          163968      flatten[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dropout_1 (Dropout)             (None, 128)          0           dense_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 2)            258         dropout_1[0][0]                  \n",
            "==================================================================================================\n",
            "Total params: 2,422,210\n",
            "Trainable params: 164,226\n",
            "Non-trainable params: 2,257,984\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2Dfx7CM6Lz4"
      },
      "source": [
        "LR = 0.0001\n",
        "bs = 32"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "naS_BPyZ6O8w"
      },
      "source": [
        "opt = Adam(lr=LR)\n",
        "model_2.compile(loss=\"binary_crossentropy\",\n",
        "              optimizer=opt ,\n",
        "              metrics=[\"accuracy\"])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9bMNd_ur6SoF",
        "outputId": "41ab4fb6-7608-4563-a01b-8f501adab789"
      },
      "source": [
        "start = time.time()\n",
        "\n",
        "H_2 = model_2.fit_generator(\n",
        "\ttrain_data,\n",
        "    steps_per_epoch=train_data.samples// bs,\n",
        "\t  validation_data=val_data,\n",
        "\t  validation_steps=val_data.samples// bs,\n",
        "\t  epochs=15)\n",
        "\n",
        "end = time.time()\n",
        "print(\"Total train time: \",(end-start)/60,\" mins\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/15\n",
            "312/312 [==============================] - 103s 324ms/step - loss: 0.3745 - accuracy: 0.8581 - val_loss: 0.0790 - val_accuracy: 0.9747\n",
            "Epoch 2/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.1118 - accuracy: 0.9668 - val_loss: 0.0540 - val_accuracy: 0.9827\n",
            "Epoch 3/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0797 - accuracy: 0.9764 - val_loss: 0.0478 - val_accuracy: 0.9827\n",
            "Epoch 4/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0616 - accuracy: 0.9816 - val_loss: 0.0339 - val_accuracy: 0.9920\n",
            "Epoch 5/15\n",
            "312/312 [==============================] - 100s 320ms/step - loss: 0.0590 - accuracy: 0.9804 - val_loss: 0.0292 - val_accuracy: 0.9920\n",
            "Epoch 6/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0512 - accuracy: 0.9835 - val_loss: 0.0295 - val_accuracy: 0.9933\n",
            "Epoch 7/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0479 - accuracy: 0.9854 - val_loss: 0.0292 - val_accuracy: 0.9907\n",
            "Epoch 8/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0390 - accuracy: 0.9886 - val_loss: 0.0286 - val_accuracy: 0.9920\n",
            "Epoch 9/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0381 - accuracy: 0.9867 - val_loss: 0.0267 - val_accuracy: 0.9907\n",
            "Epoch 10/15\n",
            "312/312 [==============================] - 100s 320ms/step - loss: 0.0396 - accuracy: 0.9875 - val_loss: 0.0213 - val_accuracy: 0.9947\n",
            "Epoch 11/15\n",
            "312/312 [==============================] - 100s 322ms/step - loss: 0.0418 - accuracy: 0.9879 - val_loss: 0.0225 - val_accuracy: 0.9920\n",
            "Epoch 12/15\n",
            "312/312 [==============================] - 103s 330ms/step - loss: 0.0359 - accuracy: 0.9892 - val_loss: 0.0219 - val_accuracy: 0.9907\n",
            "Epoch 13/15\n",
            "312/312 [==============================] - 100s 322ms/step - loss: 0.0345 - accuracy: 0.9885 - val_loss: 0.0223 - val_accuracy: 0.9907\n",
            "Epoch 14/15\n",
            "312/312 [==============================] - 100s 320ms/step - loss: 0.0343 - accuracy: 0.9873 - val_loss: 0.0215 - val_accuracy: 0.9920\n",
            "Epoch 15/15\n",
            "312/312 [==============================] - 100s 321ms/step - loss: 0.0323 - accuracy: 0.9885 - val_loss: 0.0218 - val_accuracy: 0.9907\n",
            "Total train time:  25.14623014132182  mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Aq3UxFOcqnH_"
      },
      "source": [
        "loss, acc = model.evaluate_generator(test_generator, steps=3, verbose=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NkcMoakZqob_",
        "outputId": "7533bcba-48ca-4fba-8796-db83889a8474"
      },
      "source": [
        "print(loss)\n",
        "print(acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.043514352291822433\n",
            "0.9895833134651184\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "eFPyMneCrNI6",
        "outputId": "e1f25e1b-df3e-44a4-a125-5b1bd2c56d41"
      },
      "source": [
        "plt.plot(H_2.history['accuracy'])\n",
        "plt.plot(H_2.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "TMP1_H5lraQv",
        "outputId": "d1b6a831-2e0d-40b0-fcfb-0a63e7bdde18"
      },
      "source": [
        "plt.plot(H_2.history['loss'])\n",
        "plt.plot(H_2.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper right')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0xp71qLsZr_z"
      },
      "source": [
        "**Loading the trained classification model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C0jbJQfoN2fg"
      },
      "source": [
        "model = tf.keras.models.load_model(\"/content/mask_detector (1).model\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O2TIt6iGN47l"
      },
      "source": [
        "images = ['/content/img1.jpg','/content/img3.jpg','/content/img4.jpg','/content/img5.jpg','/content/img10.jpg','/content/img9.jpg','/content/img8.jpg','/content/img7.jpg','/content/img14.jpg','/content/img13.jpg','/content/img12.jpg','/content/img11.jpg']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JGPJTMevN_ry"
      },
      "source": [
        "face_cascade = cv2.CascadeClassifier('/content/haarcascade_frontalface_default.xml')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Fdl19IEZ2Au"
      },
      "source": [
        "**Detecting masks in images**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "-0tErgC_OBeZ",
        "outputId": "3760eaee-a35f-4f94-ecca-640500e112ef"
      },
      "source": [
        "#for img in images:\n",
        "img = images[0]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=12)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "    print(f'mask percentage{mask}')\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.9*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "    print(f'without mask percentage={withoutMask}')\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "#if(len(faces)==1) :\n",
        " # print(f'mask percentage={mask}')\n",
        "  #print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 3\n",
            "Number of people with mask=2\n",
            "Number of people without mask=1\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "id": "Ug3ddCj3rxH8",
        "outputId": "50cea797-ae82-4cf2-91da-8dc77ee335fc"
      },
      "source": [
        "img = images[1]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=12)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.9*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "if(len(faces)==1) :\n",
        "  print(f'mask percentage={mask}')\n",
        "  print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 1\n",
            "Number of people with mask=1\n",
            "Number of people without mask=0\n",
            "mask percentage=100.0\n",
            "without_mask percentage=6.406345454124107e-08\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Z9koR8hSF5eu",
        "outputId": "f1b361d7-aca6-492b-9401-dce98d959962"
      },
      "source": [
        "img = images[3]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=12)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.9*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "if(len(faces)==1) :\n",
        "  print(f'mask percentage={mask}')\n",
        "  print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 3\n",
            "Number of people with mask=3\n",
            "Number of people without mask=0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "MdZ-Lw4pGGv-",
        "outputId": "9ddb6a98-00b2-4689-a279-3ed21bcf3225"
      },
      "source": [
        "img = images[4]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=12)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.9*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "if(len(faces)==1) :\n",
        "  print(f'mask percentage={mask}')\n",
        "  print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 2\n",
            "Number of people with mask=2\n",
            "Number of people without mask=0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "id": "QGhCPNT0GePV",
        "outputId": "03a1a4b8-3778-46c5-91d2-397dfb03db25"
      },
      "source": [
        "img = images[5]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=12)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.7*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 20,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "if(len(faces)==1) :\n",
        "  print(f'mask percentage={mask}')\n",
        "  print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 1\n",
            "Number of people with mask=0\n",
            "Number of people without mask=1\n",
            "mask percentage=8.690936681432504e-06\n",
            "without_mask percentage=99.99998807907104\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "b81O-oCkGsmN",
        "outputId": "f25cfc2c-b0fb-4654-abed-6a066ae58f06"
      },
      "source": [
        "img = images[8]    # Add path here\n",
        "    \n",
        "img = plt.imread(img,format='8UC1')\n",
        "gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
        "faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=18)\n",
        "\n",
        "print(f'Number of faces found = {len(faces)}')\n",
        "\n",
        "# Draw the rectangle around each face\n",
        "\n",
        "mask_count=0\n",
        "without_mask_count=0\n",
        "for (x, y, w, h) in faces:\n",
        "    \n",
        "  face = img[y:y+h, x:x+w]\n",
        "  face = cv2.resize(face, (224, 224))\n",
        "  face = img_to_array(face)/255\n",
        " \n",
        "  face = np.expand_dims(face, axis=0)\n",
        "  prob = model.predict_proba(face)[0]\n",
        "  mask=prob[0]\n",
        "  withoutMask=prob[1]\n",
        "  mask = mask*100\n",
        "  withoutMask = withoutMask*100\n",
        "    \n",
        "  font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    \n",
        "    # Getting Text Size in pixel\n",
        "    #print(\"Image Width: \" , w)\n",
        "  textSize = cv2.getTextSize(text=\"No Mask: \" + str(\"%.2f\" % round(mask, 2)), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, thickness=3)\n",
        "    #print(\"Text Width: \" , textSize[0][0])\n",
        "    \n",
        "  if mask > withoutMask:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"Mask: \" + str(\"%.2f\" % round(mask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (2*w)/textSize[0][0],\n",
        "                    color = (0, 255, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 5)\n",
        "    mask_count=mask_count+1\n",
        "  else:\n",
        "\n",
        "    cv2.putText(img,\n",
        "                    text = \"No Mask: \" + str(\"%.2f\" % round(withoutMask, 2)),\n",
        "                    org = (x-5,y-15),\n",
        "                    fontFace=font,\n",
        "                    fontScale = (1.9*w)/textSize[0][0],\n",
        "                    color = (255, 0, 0),\n",
        "                    thickness = 10,\n",
        "                    lineType = cv2.LINE_AA)\n",
        "    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n",
        "    without_mask_count+=1\n",
        "        \n",
        "print(f'Number of people with mask={mask_count}')\n",
        "print(f'Number of people without mask={without_mask_count}')\n",
        "\n",
        "\n",
        "if(len(faces)==1) :\n",
        "  print(f'mask percentage={mask}')\n",
        "  print(f'without_mask percentage={withoutMask}')\n",
        "\n",
        "plt.imshow(img)\n",
        "img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n",
        "cv2.imwrite(\"image1.jpeg\",img)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of faces found = 4\n",
            "Number of people with mask=2\n",
            "Number of people without mask=2\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mbxx7Gt_HTHH"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}